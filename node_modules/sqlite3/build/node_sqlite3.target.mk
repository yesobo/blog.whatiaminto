# This file is generated by gyp; do not edit.

TOOLSET := target
TARGET := node_sqlite3
DEFS_Debug := '-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DSQLITE_THREADSAFE=1' \
	'-DSQLITE_ENABLE_FTS3' \
	'-DSQLITE_ENABLE_RTREE' \
	'-DBUILDING_NODE_EXTENSION' \
	'-DDEBUG' \
	'-D_DEBUG'

# Flags passed to all source files.
CFLAGS_Debug := -fPIC \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-pthread \
	-m64 \
	-g \
	-O0 \
	$(RPM_OPT_FLAGS)

# Flags passed to only C files.
CFLAGS_C_Debug := $(RPM_OPT_FLAGS)

# Flags passed to only C++ files.
CFLAGS_CC_Debug := -fno-rtti \
	-fno-exceptions \
	$(RPM_OPT_FLAGS)

INCS_Debug := -I/opt/rh/nodejs010/root/usr/include \
	-I/opt/rh/nodejs010/root/usr/include/node \
	-I$(obj)/gen/sqlite-autoconf-3071700/

DEFS_Release := '-D_LARGEFILE_SOURCE' \
	'-D_FILE_OFFSET_BITS=64' \
	'-DSQLITE_THREADSAFE=1' \
	'-DSQLITE_ENABLE_FTS3' \
	'-DSQLITE_ENABLE_RTREE' \
	'-DBUILDING_NODE_EXTENSION'

# Flags passed to all source files.
CFLAGS_Release := -fPIC \
	-Wall \
	-Wextra \
	-Wno-unused-parameter \
	-pthread \
	-m64 \
	-O2 \
	-fno-strict-aliasing \
	-fno-tree-vrp \
	-fno-tree-sink \
	$(RPM_OPT_FLAGS)

# Flags passed to only C files.
CFLAGS_C_Release := $(RPM_OPT_FLAGS)

# Flags passed to only C++ files.
CFLAGS_CC_Release := -fno-rtti \
	-fno-exceptions \
	$(RPM_OPT_FLAGS)

INCS_Release := -I/opt/rh/nodejs010/root/usr/include \
	-I/opt/rh/nodejs010/root/usr/include/node \
	-I$(obj)/gen/sqlite-autoconf-3071700/

OBJS := $(obj).target/$(TARGET)/src/database.o \
	$(obj).target/$(TARGET)/src/node_sqlite3.o \
	$(obj).target/$(TARGET)/src/statement.o

# Add to the list of files we specially track dependencies for.
all_deps += $(OBJS)

# Make sure our dependencies are built before any of us.
$(OBJS): | $(obj).target/deps/sqlite3.a

# CFLAGS et al overrides must be target-local.
# See "Target-specific Variable Values" in the GNU Make manual.
$(OBJS): TOOLSET := $(TOOLSET)
$(OBJS): GYP_CFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_C_$(BUILDTYPE))
$(OBJS): GYP_CXXFLAGS := $(DEFS_$(BUILDTYPE)) $(INCS_$(BUILDTYPE)) $(CFLAGS_$(BUILDTYPE)) $(CFLAGS_CC_$(BUILDTYPE))

# Suffix rules, putting all outputs into $(obj).

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(srcdir)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# Try building from generated source, too.

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj).$(TOOLSET)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

$(obj).$(TOOLSET)/$(TARGET)/%.o: $(obj)/%.cc FORCE_DO_CMD
	@$(call do_cmd,cxx,1)

# End of this set of suffix rules
### Rules for final target.
LDFLAGS_Debug := -pthread \
	-rdynamic \
	-m64

LDFLAGS_Release := -pthread \
	-rdynamic \
	-m64

LIBS := 

$(obj).target/node_sqlite3.node: GYP_LDFLAGS := $(LDFLAGS_$(BUILDTYPE))
$(obj).target/node_sqlite3.node: LIBS := $(LIBS)
$(obj).target/node_sqlite3.node: TOOLSET := $(TOOLSET)
$(obj).target/node_sqlite3.node: $(OBJS) $(obj).target/deps/sqlite3.a FORCE_DO_CMD
	$(call do_cmd,solink_module)

all_deps += $(obj).target/node_sqlite3.node
# Add target alias
.PHONY: node_sqlite3
node_sqlite3: $(builddir)/node_sqlite3.node

# Copy this to the executable output path.
$(builddir)/node_sqlite3.node: TOOLSET := $(TOOLSET)
$(builddir)/node_sqlite3.node: $(obj).target/node_sqlite3.node FORCE_DO_CMD
	$(call do_cmd,copy)

all_deps += $(builddir)/node_sqlite3.node
# Short alias for building this executable.
.PHONY: node_sqlite3.node
node_sqlite3.node: $(obj).target/node_sqlite3.node $(builddir)/node_sqlite3.node

# Add executable to "all" target.
.PHONY: all
all: $(builddir)/node_sqlite3.node

